

2018.3.14

    《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》

    第 2 章：Java 内存区域与内存溢出异常

        2.2 运行时数据区域

            2.2.1 程序计数器
                此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域；

            2.2.2 Java 虚拟机栈
                线程私有，如果线程请求的栈深度虚拟机所允许的深度，将抛出 “栈溢出” 的异常，内存不够，则会抛出 “内存异常”；

            2.2.3 本地方法栈
                和虚拟机栈相对应；

            2.2.4 Java 堆
                所有线程共享，Java 堆是垃圾收集器管理的主要区域，分为：新生代和老年代；在细致一点的有 Eden 空间，From Survivor 空间，To Survivor 空间等。

            2.2.5 方法区
                这个区域的回收 “成绩” 比较难以令人满意；

            2.2.6 运行时常量池

            2.2.7 直接内存
                JDK 1.4 加入了 NIO 类，引入了一中基于通道与缓冲区的的 I/O 方式，它可以使用 Native 函数库直接分配堆外内存，避免在 Java 堆和 Native 来回复制数据；


    第 3 章：垃圾收集器与内存分配策略

        3.2 对象已死吗

            3.2.1 引用技术算法

                难以解决对象之间相互循环引用的问题；

            3.2.2 可达性分析算法

                “GC Root” 的对象作为起始点；

            3.2.5 回收方法去

                无用类的条件：
                    该类所有的实例都已经被回收；
                    加载该类的 ClassLoader 已经被回收；
                    无法在任何地方通过反射访问该类的方法；

                可以对满足以上三个条件的无用类进行回收，但是不是必然会被回收；

        3.3 垃圾回收算法

            3.3.1 标记 - 清除算法

            3.3.2 复制算法

            3.3.3 标记整理算法

            3.3.4 分代收集算法

        3.6 内存分配与回收策略

            3.6.1 对象优先在 eden 分配

            3.6.2 大对象直接进入老年代

            3.6.3 长期存活的对象将进入老年代

            3.6.4 动态对象年龄判定

            3.6.5 空间分配担保
