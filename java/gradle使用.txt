

gradel 命令：
    1. gradle tasks
       该指令会以分组的形式打印任务，系统的任务和非系统任务，Build tasks、Build Setup tasks、Help tasks、Shadow tasks、Verification tasks。

       Pattern: clean<TaskName>: Cleans the output files of a task.
       Pattern: build<ConfigurationName>: Assembles the artifacts of a configuration.
       Pattern: upload<ConfigurationName>: Assembles and uploads the artifacts belonging to a configuration.

       To see all tasks and more detail, run gradle tasks --all

       To see more detail about a task, run gradle help --task <task>


gradle dependencies

    compile project(':baggio-comm')
    compile 'org.github:jazmin:local'



gradle shadow 插件：
    地址 ： https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
    作用 ： 把项目的代码和依赖打成一个 jar 包

    buildscript {
      repositories {
        maven {
          url "https://plugins.gradle.org/m2/"
        }
      }
      dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
      }
    }

    apply plugin: "com.github.johnrengelman.shadow"

    plugins {
      id "com.github.johnrengelman.shadow" version "2.0.1"
    }

    shadowJar {
        baseName = 'world-webserver'
        classifier = null
        version = null

        dependencies {
            exclude(dependency('org.github:jazmin:1.1.3'))
        }
    }

===============================================================================

gradle protobuf 插件：
    地址 ： https://plugins.gradle.org/plugin/com.google.protobuf
    作用 ： 用 proto 文件生成 java 代码

    buildscript {
      repositories {
        maven {
          url "https://plugins.gradle.org/m2/"
        }
      }
      dependencies {
        classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.3"
      }
    }

    apply plugin: "com.google.protobuf"

    plugins {
      id "com.google.protobuf" version "0.8.3"
    }

    ext {
        protobufVersion = '2.5.0'
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"

            generateProtoTasks {
                all().each { task ->
                    task.builtins {
                        remove java
                    }
                    task.builtins {
                        java { }
                    }
                }
            }
        }

        generatedFilesBaseDir = "$projectDir/gen"
    }

    idea {
        module {
            sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java");
            // If you have additional sourceSets and/or codegen plugins, add all of them
        }
    }

===============================================================================
