

2018-01-26(Friday)


    类加载器

    今天发现了一个问题，在部署服务器的时候，发现如果是动态加载 jar 包（把模块逻辑打包成 jar包）通过 org.reflections.Reflections.getTypesAnnotatedWith 会得不到类集合。而通过添加到 classpath 的方式，则可以。

    后来通过找资料，对象在 jvm 的标识是 “类加载器 + 类全路径”。而这边加载 jar 包的时候，是通过 java.net.URLClassLoader 来加载的，而默认的是 sun.misc.Launcher.ClassLoader。


    /** 正常，不会提示找不到类 **/
    public static void testURLClassLoader(String jarFile, String cls) throws ClassNotFoundException, MalformedURLException {
        URLClassLoader loader = new URLClassLoader(new URL[]{new File(jarFile).toURI().toURL()});
        Class o = Class.forName(cls, false, loader);     // Class.forName(cls); 则提示找不到类 : java.lang.ClassNotFoundException: com.yangqugame.gm.GMManager
        System.out.println(o.getClassLoader());
    }

    public static void main(String[] args) {
        String jarFile = "F://BaggioMessageApplication.jar";
        String cls = "com.yangqugame.gm.GMManager";

        testURLClassLoader(jarFile, cls);
    }



https://javarevisited.blogspot.in/2012/12/how-classloader-works-in-java.html

Java ClassLoader 如何工作

Java 类加载器一般在运行的时候加载类。

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2018-03-06(Tuesday)

    类加载器：

        1. 比较两个类是否 “相等”，只有这两个类是由同一个类加载器加载的前提下才有意义；

        2. 双亲委派模型

            绝大部分 Java 程序都会使用一下三种系统提供的类加载器：
                启动类加载器（Bootstrap ClassLoader）： 加载 <JAVA_HOME>\lib 目录下面名字符合类库的库，如 rt.jar;或者 -Xbootclasspath 设定路径；
                推展类加载器（Extension ClassLoader）： 加载 <JAVA_HOME>\lib\ext 的库，或者被 java.ext.dirs 系统变量指定的路径；
                应用程序类加载器（Application ClassLoader）： 加载用户类路径（ClassPath）上指定的库，程序中默认的类加载器；

            双亲委派模型的工作过程：
                如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父亲加载器去完成，知道最顶层加载器，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载类才会尝试自己去加载。